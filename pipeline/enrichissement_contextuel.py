import json
import os
from collections import defaultdict

# üìÅ Chemin du fichier de r√©f√©rentiel
R√âF√âRENTIEL_PATH = "data/referentiel_contextuel.json"

# üì• Chargement du r√©f√©rentiel existant
def charger_r√©f√©rentiel() -> dict:
    if not os.path.exists(R√âF√âRENTIEL_PATH):
        return defaultdict(list)
    with open(R√âF√âRENTIEL_PATH, "r", encoding="utf-8") as f:
        return json.load(f)

# üíæ Sauvegarde du r√©f√©rentiel enrichi
def sauvegarder_r√©f√©rentiel(r√©f√©rentiel: dict):
    dossier = os.path.dirname(R√âF√âRENTIEL_PATH)
    if not os.path.exists(dossier):
        os.makedirs(dossier)  # ‚úÖ Cr√©e le dossier s‚Äôil n‚Äôexiste pas
    with open(R√âF√âRENTIEL_PATH, "w", encoding="utf-8") as f:
        json.dump(r√©f√©rentiel, f, indent=2, ensure_ascii=False)

# üîÅ Enrichissement automatique depuis une requ√™te m√©tier
def enrichir_depuis_requ√™te(requete: str):
    r√©f√©rentiel = charger_r√©f√©rentiel()
    lignes = [l.strip() for l in requete.split(".") if l.strip()]
    r√¥les_candidats = ["gestionnaire", "manager", "comptable", "client", "utilisateur", "administrateur", "op√©rateur"]

    for ligne in lignes:
        for r√¥le in r√¥les_candidats:
            if r√¥le in ligne.lower():
                r√©f√©rentiel.setdefault(r√¥le, [])
                if ligne not in r√©f√©rentiel[r√¥le]:
                    r√©f√©rentiel[r√¥le].append(ligne)
    sauvegarder_r√©f√©rentiel(r√©f√©rentiel)

# üîç Extraction des connaissances m√©tier pour un r√¥le donn√©
def extraire_connaissance(r√¥le: str) -> list:
    r√©f√©rentiel = charger_r√©f√©rentiel()
    return r√©f√©rentiel.get(r√¥le.lower(), [])
