import re
from pipeline.analyse_roles import analyse_roles
from pipeline.gen_objectifs import gen_objectifs
from pipeline.gen_exigences import gen_exigences
from pipeline.gen_tests import gen_tests

# üîç Extraction r√¥le + action depuis la requ√™te
def extraire_r√¥les_et_actions(requete: str) -> list:
    r√¥les_actions = []
    phrases = re.split(r"[.]", requete)
    for phrase in phrases:
        match = re.search(r"(le|la|l‚Äô|un|une)?\s*(\w+)\s+(veut|souhaite|d√©sire|demande)\s+(.*)", phrase.strip(), re.IGNORECASE)
        if match:
            r√¥le = match.group(2).lower()
            action = match.group(4).strip()
            r√¥les_actions.append((r√¥le, action))
    return r√¥les_actions

# üîê Masquage des livrables sensibles
def privatiser_bloc(bloc: dict) -> dict:
    bloc["suggestions"] = ["üîí Suggestion masqu√©e"]
    bloc["validation"] = "üîí Validation masqu√©e"
    bloc["exigences"] = [(cat, typ, "üîí Exigence masqu√©e") for cat, typ, _ in bloc["exigences"]]
    bloc["tests"] = [f"üîí Test masqu√© ({i+1})" for i in range(len(bloc["tests"]))]
    return bloc

# ‚úÖ Crit√®res d‚Äôacceptation standards
def g√©n√©rer_crit√®res(r√¥le: str, action: str) -> list:
    return [
        "L'action est r√©alisable en moins de 3 √©tapes",
        "Le r√©sultat est visible imm√©diatement"
    ]

# üí° Suggestions IA
def g√©n√©rer_suggestions(r√¥le: str, action: str) -> list:
    return [
        f"Ajouter une option avanc√©e pour le {r√¥le}",
        "Permettre une personnalisation"
    ]

# üîí Validation m√©tier
def g√©n√©rer_validation(r√¥le: str, action: str) -> str:
    return f"Le {r√¥le} confirme que l'action '{action}' r√©pond √† son besoin m√©tier."

# üß† Orchestration principale
def orchestrer_pipeline(requete: str, privatiser: bool = False) -> list:
    r√¥les_actions = extraire_r√¥les_et_actions(requete)
    stories = []

    if r√¥les_actions:
        # Format r√¥le + action d√©tect√©
        for r√¥le, action in r√¥les_actions:
            story = {
                "acteur": r√¥le,
                "action": action,
                "story": f"En tant que {r√¥le}, je veux {action} pour atteindre mes objectifs m√©tier.",
                "exigences": gen_exigences(r√¥le, action),
                "crit√®res": g√©n√©rer_crit√®res(r√¥le, action),
                "tests": gen_tests(r√¥le, action),
                "suggestions": g√©n√©rer_suggestions(r√¥le, action),
                "validation": g√©n√©rer_validation(r√¥le, action)
            }
            if privatiser:
                story = privatiser_bloc(story)
            stories.append(story)
        return stories

    # Sinon, fallback sur r√¥le seul + 1 objectif g√©n√©r√©
    r√¥les = analyse_roles(requete)
    for r√¥le in r√¥les:
        objectifs = gen_objectifs(r√¥le)
        if objectifs:
            obj = objectifs[0]
            story = {
                "acteur": r√¥le,
                "action": obj,
                "story": f"En tant que {r√¥le}, je veux {obj} pour atteindre mes objectifs m√©tier.",
                "exigences": gen_exigences(r√¥le, obj),
                "crit√®res": g√©n√©rer_crit√®res(r√¥le, obj),
                "tests": gen_tests(r√¥le, obj),
                "suggestions": g√©n√©rer_suggestions(r√¥le, obj),
                "validation": g√©n√©rer_validation(r√¥le, obj)
            }
            if privatiser:
                story = privatiser_bloc(story)
            stories.append(story)

    return stories
