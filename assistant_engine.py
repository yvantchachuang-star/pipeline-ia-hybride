def repondre_chat(message: str, stories: list) -> str:
    message = message.lower()
    rÃ©ponses = []

    for s in stories:
        if message in s["acteur"] or message in s["story"].lower():
            rÃ©ponses.append(f"ğŸ§© **User Story** : {s['story']}")
            rÃ©ponses.append("ğŸ“˜ **Exigences associÃ©es** :")
            for typ, babok, texte in s["exigences"]:
                rÃ©ponses.append(f"- **{typ}** : {texte} *(BABOK : {babok})*)")
            rÃ©ponses.append("âœ… **CritÃ¨res dâ€™acceptation** :")
            for c in s["critÃ¨res"]:
                rÃ©ponses.append(f"- {c}")
            rÃ©ponses.append("ğŸ§ª **Tests fonctionnels** :")
            for t in s["tests"]:
                rÃ©ponses.append(f"- {t}")
            rÃ©ponses.append("ğŸ’¡ **Suggestions IA** :")
            for sug in s["suggestions"]:
                rÃ©ponses.append(f"- {sug}")
            rÃ©ponses.append("ğŸ”’ **Validation mÃ©tier** :")
            rÃ©ponses.append(s["validation"])
            rÃ©ponses.append("")

    if rÃ©ponses:
        return "\n".join(rÃ©ponses)
    else:
        return "ğŸ¤– Je nâ€™ai pas trouvÃ© dâ€™Ã©lÃ©ment correspondant. Essaie avec un rÃ´le mÃ©tier, un type dâ€™exigence ou un mot-clÃ© mÃ©tier."

