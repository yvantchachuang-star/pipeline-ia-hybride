import re

def repondre_chat(message: str, stories: list) -> str:
    message = message.lower()
    mots_cles = re.findall(r"\w+", message)
    r√©ponses = []

    for s in stories:
        r√¥le = s["acteur"].lower()
        story = s["story"].lower()

        # D√©tection par r√¥le
        match_r√¥le = r√¥le in message or any(r√¥le in mot for mot in mots_cles)

        # D√©tection par mots-cl√©s dans story
        match_story = any(mot in story for mot in mots_cles)

        # D√©tection dans exigences
        match_exigences = any(
            any(mot in texte.lower() or mot in babok.lower() or mot in typ.lower()
                for mot in mots_cles)
            for typ, babok, texte in s.get("exigences", [])
        )

        # D√©tection dans crit√®res
        match_crit√®res = any(any(mot in c.lower() for mot in mots_cles) for c in s["crit√®res"])

        # D√©tection dans tests
        match_tests = any(any(mot in t.lower() for mot in mots_cles) for t in s["tests"])

        # D√©tection dans suggestions
        match_suggestions = any(any(mot in sug.lower() for mot in mots_cles) for sug in s["suggestions"])

        # D√©tection dans validation
        match_validation = any(mot in s["validation"].lower() for mot in mots_cles)

        if match_r√¥le or match_story or match_exigences or match_crit√®res or match_tests or match_suggestions or match_validation:
            r√©ponses.append(f"### üß© User Story ({s['acteur'].capitalize()})\n{s['story']}")

            if s.get("exigences"):
                r√©ponses.append("üìò **Exigences BABOK**")
                for typ, babok, texte in s["exigences"]:
                    r√©ponses.append(f"- **{typ}** : {texte}  \n‚Ü™ *({babok})*")

            r√©ponses.append("‚úÖ **Crit√®res d‚Äôacceptation**")
            for c in s["crit√®res"]:
                r√©ponses.append(f"- {c}")

            r√©ponses.append("üß™ **Tests fonctionnels**")
            for t in s["tests"]:
                r√©ponses.append(f"- {t}")

            r√©ponses.append("üí° **Suggestions IA**")
            for sug in s["suggestions"]:
                r√©ponses.append(f"- {sug}")

            r√©ponses.append("üîí **Validation m√©tier**")
            r√©ponses.append(f"{s['validation']}")
            r√©ponses.append("")

    if r√©ponses:
        return "\n".join(r√©ponses)
    else:
        return (
            "ü§ñ Je n‚Äôai pas trouv√© de livrable correspondant √† ta demande.\n"
            "Essaie avec un r√¥le m√©tier, un mot-cl√© m√©tier, ou un type d‚Äôexigence (ex : fonctionnelle, m√©tier, test‚Ä¶)."
        )
