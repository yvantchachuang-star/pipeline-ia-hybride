import re

def extraire_roles_depuis_requete(requete):
    # Extraction dynamique des r√¥les via "En tant que X"
    matches = re.findall(r"en tant que (\w+)", requete.lower())
    return list(set(matches)) or ["utilisateur"]

def generer_stories_depuis_besoin(requete):
    r√¥les = extraire_roles_depuis_requete(requete)
    stories = []

    for r√¥le in r√¥les:
        objectif = f"r√©aliser une action cl√© li√©e √† {r√¥le}"
        story = f"En tant que {r√¥le}, je veux {objectif} pour atteindre mes objectifs m√©tier."
        crit√®res = [f"L'action est r√©alisable en moins de 3 √©tapes", f"Le r√©sultat est visible imm√©diatement"]
        tests = [f"V√©rifier que le {r√¥le} peut acc√©der √† la fonctionnalit√©", f"V√©rifier que le r√©sultat est conforme"]
        validation = f"Le {r√¥le} confirme que l'action r√©pond √† son besoin m√©tier."
        suggestions = [f"Ajouter une option avanc√©e pour le {r√¥le}", f"Permettre une personnalisation"]
        exigences = [
            ("M√©tier", "Objectif m√©tier", f"{r√¥le.capitalize()} doit pouvoir {objectif}"),
            ("Fonctionnelle", "Fonction cl√©", f"Interface permettant au {r√¥le} de {objectif}")
        ]
        babok = f"Exigence m√©tier identifi√©e pour le r√¥le {r√¥le}, li√©e √† l'objectif : {objectif}."

        stories.append({
            "acteur": r√¥le,
            "story": story,
            "crit√®res": crit√®res,
            "tests": tests,
            "validation": validation,
            "suggestions": suggestions,
            "babok": babok,
            "exigences": exigences
        })

    return stories

def repondre_chat(message, stories):
    message = message.lower()
    r√©ponses = []

    for s in stories:
        if any(mot in message for mot in s["story"].lower().split()):
            r√©ponses.append(f"üß© **User Story** : {s['story']}\nüìò **Exigences associ√©es** :")
            for typ, babok, texte in s["exigences"]:
                r√©ponses.append(f"- **{typ}** : {texte} *(BABOK : {babok})*")

    if r√©ponses:
        return "\n\n".join(r√©ponses)
    else:
        return "ü§ñ Je peux t‚Äôaider √† explorer les exigences, clarifier un besoin ou proposer une am√©lioration. Pose-moi une question li√©e aux r√¥les, aux livrables ou aux processus m√©tier."
