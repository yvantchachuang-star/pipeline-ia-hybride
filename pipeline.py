import re

def extraire_roles_depuis_requete(requete):
    # D√©tection dynamique des r√¥les via "le X", "la X", "en tant que X"
    candidats = re.findall(r"\ble (\w+)", requete.lower()) + \
                re.findall(r"\bla (\w+)", requete.lower()) + \
                re.findall(r"\ben tant que (\w+)", requete.lower())
    return list(set(candidats)) or ["utilisateur"]

def generer_stories_depuis_besoin(requete):
    r√¥les = extraire_roles_depuis_requete(requete)
    stories = []
    objectifs = [
        "acc√©der √† une information critique",
        "r√©aliser une t√¢che m√©tier efficacement",
        "obtenir une vue consolid√©e de l‚Äôactivit√©",
        "pr√©parer une d√©cision",
        "suivre l‚Äô√©volution d‚Äôun indicateur",
        "valider une op√©ration m√©tier"
    ]

    for r√¥le in r√¥les:
        for i in range(3):
            objectif = objectifs[(i + hash(r√¥le)) % len(objectifs)]
            story = f"En tant que {r√¥le}, je veux {objectif} pour atteindre mes objectifs m√©tier."
            crit√®res = [f"L'action est r√©alisable en moins de 3 √©tapes", f"Le r√©sultat est visible imm√©diatement"]
            tests = [f"V√©rifier que le {r√¥le} peut acc√©der √† la fonctionnalit√©", f"V√©rifier que le r√©sultat est conforme"]
            validation = f"Le {r√¥le} confirme que l'action r√©pond √† son besoin m√©tier."
            suggestions = [f"Ajouter une option avanc√©e pour le {r√¥le}", f"Permettre une personnalisation"]
            exigences = [
                ("M√©tier", "Objectif m√©tier", f"{r√¥le.capitalize()} doit pouvoir {objectif}"),
                ("Fonctionnelle", "Fonction cl√©", f"Interface permettant au {r√¥le} de {objectif}")
            ]
            babok = f"Exigence m√©tier identifi√©e pour le r√¥le {r√¥le}, li√©e √† l'objectif : {objectif}."

            stories.append({
                "acteur": r√¥le,
                "story": story,
                "crit√®res": crit√®res,
                "tests": tests,
                "validation": validation,
                "suggestions": suggestions,
                "babok": babok,
                "exigences": exigences
            })

    return stories

def repondre_chat(message, stories):
    message = message.lower()
    r√©ponses = []

    for s in stories:
        match_story = message in s["story"].lower()
        match_role = message in s["acteur"]
        match_exigences = any(message in texte.lower() or message in babok.lower() or message in typ.lower()
                              for typ, babok, texte in s["exigences"])
        match_tests = any(message in t.lower() for t in s["tests"])
        match_crit√®res = any(message in c.lower() for c in s["crit√®res"])
        match_suggestions = any(message in sug.lower() for sug in s["suggestions"])

        if match_story or match_role or match_exigences or match_tests or match_crit√®res or match_suggestions:
            r√©ponses.append(f"üß© **User Story** : {s['story']}")
            r√©ponses.append("üìò **Exigences associ√©es** :")
            for typ, babok, texte in s["exigences"]:
                r√©ponses.append(f"- **{typ}** : {texte} *(BABOK : {babok})*)")
            r√©ponses.append("‚úÖ **Crit√®res d‚Äôacceptation** :")
            for c in s["crit√®res"]:
                r√©ponses.append(f"- {c}")
            r√©ponses.append("üß™ **Tests fonctionnels** :")
            for t in s["tests"]:
                r√©ponses.append(f"- {t}")
            r√©ponses.append("üí° **Suggestions IA** :")
            for sug in s["suggestions"]:
                r√©ponses.append(f"- {sug}")
            r√©ponses.append("üîí **Validation m√©tier** :")
            r√©ponses.append(s["validation"])
            r√©ponses.append("")

    if r√©ponses:
        return "\n".join(r√©ponses)
    else:
        return "ü§ñ Je n‚Äôai pas trouv√© d‚Äô√©l√©ment correspondant. Essaie avec un r√¥le m√©tier, un type d‚Äôexigence ou un mot-cl√© m√©tier."
