# ğŸ“¦ Typage des exigences selon leur contenu
def typer_exigence(texte):
    texte = texte.lower()
    if any(mot in texte for mot in ["valeur", "efficacitÃ©", "objectif", "conformitÃ©", "rentabilitÃ©", "sÃ©curisÃ©"]):
        return "MÃ©tier"
    elif any(mot in texte for mot in ["interface", "action", "fonction", "affichage", "filtrer", "exporter", "accÃ©der"]):
        return "Fonctionnelle"
    elif any(mot in texte for mot in ["temps", "performance", "sÃ©curitÃ©", "latence", "format", "pdf", "authentification"]):
        return "Technique"
    elif any(mot in texte for mot in ["client", "gestionnaire", "utilisateur", "comptable", "juriste", "partenaire"]):
        return "Partie prenante"
    elif any(mot in texte for mot in ["accessibilitÃ©", "ergonomie", "temps de rÃ©ponse", "robustesse", "fiabilitÃ©"]):
        return "Non fonctionnelle"
    else:
        return "Non classÃ©"

# ğŸ’¡ Suggestions IA interactives
def generer_suggestions_ia(template):
    return [
        f"Ajouter une rÃ¨gle de sÃ©curitÃ© liÃ©e Ã  Â« {template['action']} Â»",
        f"DÃ©finir un indicateur dâ€™efficacitÃ© pour Â« {template['objectif']} Â»",
        f"PrÃ©ciser le rÃ´le Â« {template['acteur']} Â» : opÃ©rationnel ou dÃ©cisionnel",
        f"GÃ©nÃ©rer une version alternative pour un autre profil mÃ©tier",
        f"Exporter ce rÃ©sultat ou lâ€™ajouter au backlog"
    ]

# ğŸ§© GÃ©nÃ©ration complÃ¨te dâ€™une user story enrichie
def generer_story_complete(template):
    story = f"En tant que {template['acteur']}, je veux {template['action']} afin de {template['objectif']}."

    exigences_brutes = [
        f"Lâ€™interface permet de filtrer les contrats par client, date et statut",
        f"Lâ€™accÃ¨s aux contrats est protÃ©gÃ© par une authentification forte",
        f"Les contrats sont exportables en PDF avec signature et horodatage",
        f"{template['acteur'].capitalize()} peut suivre les Ã©chÃ©ances contractuelles",
        f"Le systÃ¨me garantit un temps de rÃ©ponse infÃ©rieur Ã  2 secondes"
    ]

    exigences_typÃ©es = [(typer_exigence(e), e) for e in exigences_brutes]

    critÃ¨res = exigences_brutes[:3]
    tests = [
        f"Se connecter avec un compte {template['acteur']}",
        f"AccÃ©der Ã  la fonctionnalitÃ© : {template['action']}",
        f"VÃ©rifier le rÃ©sultat attendu liÃ© Ã  {template['objectif']}"
    ]
    validation = f"Le besoin mÃ©tier Â« {template['objectif']} Â» est couvert par la fonctionnalitÃ© Â« {template['action']} Â»."
    suggestions = generer_suggestions_ia(template)

    return {
        "story": story,
        "exigences": exigences_typÃ©es,
        "critÃ¨res": critÃ¨res,
        "tests": tests,
        "validation": validation,
        "suggestions": suggestions
    }

# ğŸ§  GÃ©nÃ©ration de 3 user stories Ã  partir dâ€™un besoin mÃ©tier
def generer_stories_depuis_besoin(besoin):
    besoin = besoin.lower()
    stories = []

    if "contrat" in besoin:
        stories.append({
            "acteur": "gestionnaire",
            "action": "accÃ©der aux contrats en ligne de maniÃ¨re sÃ©curisÃ©e",
            "objectif": "suivre les Ã©chÃ©ances et engagements"
        })
        stories.append({
            "acteur": "juriste",
            "action": "valider les clauses sensibles des contrats",
            "objectif": "garantir la conformitÃ© juridique"
        })
        stories.append({
            "acteur": "client",
            "action": "consulter mes contrats depuis mon espace personnel",
            "objectif": "vÃ©rifier mes engagements"
        })
    else:
        stories.append({
            "acteur": "utilisateur",
            "action": f"rÃ©aliser lâ€™action liÃ©e Ã  Â« {besoin} Â»",
            "objectif": f"atteindre lâ€™objectif Â« {besoin} Â»"
        })
        stories.append({
            "acteur": "gestionnaire",
            "action": f"faciliter la tÃ¢che Â« {besoin} Â»",
            "objectif": f"amÃ©liorer la productivitÃ©"
        })
        stories.append({
            "acteur": "analyste",
            "action": f"mesurer lâ€™impact de Â« {besoin} Â»",
            "objectif": f"orienter les dÃ©cisions"
        })

    return [generer_story_complete(s) for s in stories]

# ğŸ“¥ Format Markdown pour export
def formater_markdown(stories, exigences_globales):
    md = "# ğŸ“˜ Exigences classÃ©es par type\n"
    types = ["MÃ©tier", "Fonctionnelle", "Technique", "Partie prenante", "Non fonctionnelle"]
    for t in types:
        md += f"\n## ğŸŸ¦ {t}\n"
        for typ, texte in exigences_globales:
            if typ == t:
                md += f"- {texte}\n"

    for i, s in enumerate(stories, start=1):
        md += f"\n# ğŸ§© Story {i}\n"
        md += f"**User Story**\n{s['story']}\n\n"
        md += "## âœ… CritÃ¨res dâ€™acceptation\n"
        for c in s["critÃ¨res"]:
            md += f"- {c}\n"
        md += "\n## ğŸ§ª Tests fonctionnels\n"
        for t in s["tests"]:
            md += f"- {t}\n"
        md += f"\n## ğŸ”’ Validation mÃ©tier\n{s['validation']}\n"
        md += "\n## ğŸ’¡ Suggestions IA\n"
        for sug in s["suggestions"]:
            md += f"- {sug}\n"

    md += """
# ğŸ“˜ DÃ©finition des types dâ€™exigences

- **MÃ©tier** : Objectifs ou besoins exprimÃ©s par lâ€™organisation (valeur, efficacitÃ©, conformitÃ©)  
- **Fonctionnelle** : Comportement attendu du systÃ¨me (actions, interfaces, rÃ¨gles)  
- **Technique** : Contraintes dâ€™architecture, performance, sÃ©curitÃ©, formats  
- **Partie prenante** : Besoins spÃ©cifiques dâ€™un acteur (client, gestionnaire, partenaire)  
- **Non fonctionnelle** : QualitÃ©s du systÃ¨me (temps de rÃ©ponse, accessibilitÃ©, robustesse, ergonomie)
"""
    return md

# âœ… VÃ©rification locale
if __name__ == "__main__":
    besoin_test = "Un systÃ¨me de gestion des contrats sÃ©curisÃ© et efficace"
    stories = generer_stories_depuis_besoin(besoin_test)
    exigences = []
    for s in stories:
        exigences.extend(s["exigences"])
    markdown = formater_markdown(stories, exigences)
    print("âœ… pipeline.py fonctionne correctement")
    print(markdown[:500])
