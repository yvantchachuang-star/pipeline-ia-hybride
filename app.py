import streamlit as st
from pipeline import generer_stories_depuis_besoin, formater_markdown

st.set_page_config(page_title="GÃ©nÃ©rateur de User Stories enrichies", layout="wide")
st.title("ğŸ§  GÃ©nÃ©rateur intelligent de User Stories")

besoin = st.text_input("Exprimez votre besoin mÃ©tier")

if st.button("GÃ©nÃ©rer"):
    stories = generer_stories_depuis_besoin(besoin)

    exigences_globales = []
    for s in stories:
        exigences_globales.extend(s["exigences"])

    st.markdown("## ğŸ“˜ Exigences classÃ©es par type")
    types = ["MÃ©tier", "Fonctionnelle", "Technique", "Partie prenante", "Non fonctionnelle"]
    for t in types:
        st.markdown(f"### ğŸŸ¦ {t}")
        for typ, texte in exigences_globales:
            if typ == t:
                st.markdown(f"- {texte}")

    for i, s in enumerate(stories, start=1):
        st.markdown(f"## ğŸ§© Story {i}")
        st.markdown(f"**User Story**\n{s['story']}")

        st.markdown("**âœ… CritÃ¨res dâ€™acceptation**")
        for c in s["critÃ¨res"]:
            st.markdown(f"- {c}")

        st.markdown("**ğŸ§ª Tests fonctionnels**")
        for t in s["tests"]:
            st.markdown(f"- {t}")

        st.markdown(f"**ğŸ”’ Validation mÃ©tier**\n{s['validation']}")

        st.markdown("**ğŸ’¡ Suggestions IA**")
        for suggestion in s["suggestions"]:
            if st.button(suggestion, key=f"{i}-{suggestion}"):
                st.success(f"âœ… Suggestion sÃ©lectionnÃ©e : {suggestion}")

    st.markdown("---")
    st.markdown("## ğŸ“˜ DÃ©finition des types dâ€™exigences")
    st.markdown("""
- **MÃ©tier** : Objectifs ou besoins exprimÃ©s par lâ€™organisation (valeur, efficacitÃ©, conformitÃ©)  
- **Fonctionnelle** : Comportement attendu du systÃ¨me (actions, interfaces, rÃ¨gles)  
- **Technique** : Contraintes dâ€™architecture, performance, sÃ©curitÃ©, formats  
- **Partie prenante** : Besoins spÃ©cifiques dâ€™un acteur (client, gestionnaire, partenaire)  
- **Non fonctionnelle** : QualitÃ©s du systÃ¨me (temps de rÃ©ponse, accessibilitÃ©, robustesse, ergonomie)
    """)

    markdown_result = formater_markdown(stories, exigences_globales)
    st.download_button("ğŸ“¥ TÃ©lÃ©charger le Markdown", markdown_result, file_name="user_stories.md")



